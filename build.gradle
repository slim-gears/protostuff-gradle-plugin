plugins {
    id "com.gradle.plugin-publish" version "0.14.0"
    id "java-gradle-plugin"
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

group = project.'meta.groupId'
version = project.'meta.version'

dependencies {
    compile gradleApi()
    compile group: 'io.protostuff', name: 'protostuff-compiler', version: '1.6.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def sonatypeUsername = project.property('sonatype.username') as String
def sonatypePassword = project.property('sonatype.password') as String
def sonatypeRepoUrl = project.property('sonatype.repoUrl') as String

ext {
    pluginId = group
    description = project.'meta.description'
    githubPath = project.'meta.githubPath'
    vcsUrl = "https://github.com/$project.ext.githubPath"
    displayName = project.'meta.name'
    license = project.'meta.license'
    licenseUrl = "$project.ext.vcsUrl/blob/master/LICENSE"
    artifactId = project.'meta.artifact'
}

if (project.hasProperty('signing.secretKeyRingFile')) {
    project.'signing.secretKeyRingFile' = project.'signing.secretKeyRingFile'
            .replace('~', System.getProperty('user.home'))
}

repositories {
    mavenCentral()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.value 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.value 'javadoc'
}

artifacts {
    archives sourceJar
    archives javadocJar
}

gradlePlugin {
    plugins {
        protostuffCompilerPlugin {
            id = project.ext.pluginId
            implementationClass = 'io.protostuff.gradle.ProtostuffCompilerPlugin'
        }
    }
}

pluginBundle {
    website = project.ext.vcsUrl
    vcsUrl = project.ext.vcsUrl
    description = project.ext.description
    tags = ['protostuff', 'protobuf']

    plugins {
        protostuffCompilerPlugin {
            displayName = project.ext.displayName
        }
    }
}

publishing {
    repositories {
        mavenLocal()
        if (sonatypeUsername && sonatypePassword && sonatypeRepoUrl) {
            maven {
                url sonatypeRepoUrl
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    publications {
        pluginPublication(MavenPublication) {
            groupId = project.group
            artifactId = project.ext.artifactId
            version = project.version

            from components.java
            artifact sourceJar
            artifact javadocJar

            pom {
                name = project.ext.displayName
                description = project.ext.description
                url = project.ext.vcsUrl
                licenses {
                    license {
                        name = project.ext.license
                        url = project.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = 'denis-itskovich'
                        name = 'Denis Itskovich'
                        email = 'denis.itskovich@gmail.com'
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/${project.ext.githubPath}.git"
                    developerConnection = "scm:git:ssh://github.com/${project.ext.githubPath}.git"
                    url = project.ext.vcsUrl
                }
            }
        }
    }
}

signing {
    required { project.hasProperty('signing.keyId') && project.hasProperty('signing.secretKeyRingFile') }
}

project.afterEvaluate {
    publishing.publications.each { project.signing.sign it }
}
