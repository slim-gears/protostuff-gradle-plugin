import java.time.Duration

plugins {
    id "com.gradle.plugin-publish" version "0.14.0"
    id "java-gradle-plugin"
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

group = project.'meta.groupId'
version = project.'meta.version'

dependencies {
    compile gradleApi()
    compile group: 'io.protostuff', name: 'protostuff-compiler', version: '1.6.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

ext {
    pluginId = group
    description = project.'meta.description'
    githubPath = project.'meta.githubPath'
    vcsUrl = "https://github.com/$project.ext.githubPath"
    displayName = project.'meta.name'
    license = project.'meta.license'
    licenseUrl = "$project.ext.vcsUrl/blob/master/LICENSE"
    artifactId = project.'meta.artifact'
}

if (project.hasProperty('signing.secretKeyRingFile')) {
    project.'signing.secretKeyRingFile' = project.'signing.secretKeyRingFile'
            .replace('~', System.getProperty('user.home'))
}

repositories {
    mavenCentral()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.value 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.value 'javadoc'
}

artifacts {
    archives sourceJar
    archives javadocJar
}

gradlePlugin {
    plugins {
        protostuffCompilerPlugin {
            id = project.ext.pluginId
            implementationClass = 'io.protostuff.gradle.ProtostuffCompilerPlugin'
        }
    }
}

pluginBundle {
    website = project.ext.vcsUrl
    vcsUrl = project.ext.vcsUrl
    description = project.ext.description
    tags = ['protostuff', 'protobuf']

    plugins {
        protostuffCompilerPlugin {
            displayName = project.ext.displayName
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        pluginPublication(MavenPublication) {
            groupId = project.group
            artifactId = project.ext.artifactId
            version = project.version

            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

signing {
    required { project.hasProperty('signing.keyId') && project.hasProperty('signing.secretKeyRingFile') }
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(8)
}

project.afterEvaluate {
    publishing.publications.each {
        it.pom {
            name = project.ext.displayName
            description = project.ext.description
            url = project.ext.vcsUrl
            licenses {
                license {
                    name = project.ext.license
                    url = project.ext.licenseUrl
                }
            }
            developers {
                developer {
                    id = 'denis-itskovich'
                    name = 'Denis Itskovich'
                    email = 'denis.itskovich@gmail.com'
                }
            }
            scm {
                connection = "scm:git:git://github.com/${project.ext.githubPath}.git"
                developerConnection = "scm:git:ssh://github.com/${project.ext.githubPath}.git"
                url = project.ext.vcsUrl
            }
        }

        project.signing.sign it
    }
}

def isSnapshot = project.version.endsWith '-SNAPSHOT'

if (!isSnapshot &&
        project.hasProperty('sonatype.username') &&
        project.hasProperty('sonatype.password') &&
        project.hasProperty('sonatype.baseUrl')) {
    def sonatypeUser = project.'sonatype.username' as String
    def sonatypePassword = project.'sonatype.password' as String
    def sonatypeUrl = project.'sonatype.baseUrl' as String

    publishing {
        repositories {
            maven {
                url "$sonatypeUrl/service/local/staging/deploy/maven2/"
                credentials {
                    username sonatypeUser
                    password sonatypePassword
                }
            }
        }
    }

    project.nexusPublishing {
        repositories {
            it.sonatype {  //only for users registered in Sonatype after 24 Feb 2021
                nexusUrl = uri("$sonatypeUrl/service/local/")
                snapshotRepositoryUrl = uri("$sonatypeUrl/content/repositories/snapshots/")
                username = sonatypeUser
                password = sonatypePassword
            }
        }
        it.transitionCheckOptions {
            it.maxRetries.value 120
            it.delayBetween.value Duration.ofSeconds(10)
        }
    }

    project.afterEvaluate {
        project.tasks.create("publishAndRelease")  {
            dependsOn(project.publishToSonatype, project.closeAndReleaseSonatypeStagingRepository)
        }
    }
}
